<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  ${MAGENTO_MODULE_NAMESPACE}
 * @package   ${MAGENTO_MODULE_NAMESPACE}_${MAGENTO_MODULE}
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

namespace Magentor\Framework\Magento\Info;

use Magentor\Framework\App\ApplicationInterface;
use Magentor\Framework\Filesystem\DirectoryRegistrar;
use Magentor\Framework\Magento\FileSystem\MagentoOne;

class Describer
{
    
    /** @var ApplicationInterface */
    protected $application;
    
    
    /**
     * Describer constructor.
     *
     * @param ApplicationInterface $application
     */
    public function __construct(ApplicationInterface $application)
    {
        $this->application = $application;
    }
    
    
    public function bootstrap()
    {
        $this->describeMagentoDir();
    }
    
    
    protected function describeMagentoDir()
    {
        if ($this->isMagentoOne()) {
            /** @todo Bootstrap Magento 1 */
            return true;
        }
        
        if ($this->isMagentoTwo()) {
            /** @todo Bootstrap Magento 2 */
            return true;
        }
        
        return false;
    }
    
    
    /**
     * @return bool
     */
    protected function isMagentoOne()
    {
        if ($this->magentoIsReadable(MagentoOne::MAGE_PATH)) {
            return true;
        }
        
        return false;
    }
    
    
    /**
     * @return bool
     */
    protected function isMagentoTwo()
    {
        if ($this->isMagentoOne()) {
            return false;
        }
        
        /** @todo Implement the logic to check if it's a Magento 2 version. */
        return false;
    }
    
    
    /**
     * @param string $filename
     *
     * @return bool
     */
    protected function magentoIsReadable($filename)
    {
        $fileExists = $this->magentoFileExists($filename);
        return $fileExists && is_readable($this->magentoBuildPath($filename));
    }
    
    
    /**
     * @param string $filename
     *
     * @return bool
     */
    protected function magentoFileExists($filename)
    {
        return file_exists($this->magentoBuildPath($filename));
    }
    
    
    /**
     * @param string $filename
     *
     * @return string
     */
    protected function magentoBuildPath($filename)
    {
        return DirectoryRegistrar::getMagentoDir() . '/' . $filename;
    }
}
